syntax = "proto3";
package player;

service MusicPlayer {
  // Player Commands
  // Toggle Pause/Play, returns the new state
  rpc TogglePause(Empty) returns (PlayState);
  rpc SkipNext(Empty) returns (Empty);
  rpc SkipPrevious(Empty) returns (Empty);
  rpc GetProgress(Empty) returns (GetProgressResponse);
  rpc VolumeUp(Empty) returns (VolumeReply);
  rpc VolumeDown(Empty) returns (VolumeReply);
  rpc SpeedUp(Empty) returns (SpeedReply);
  rpc SpeedDown(Empty) returns (SpeedReply);
  // Toggle the gapless mdoe, returns the new state.
  rpc ToggleGapless(Empty) returns (GaplessState);
  rpc SeekForward(Empty) returns (PlayerTime);
  rpc SeekBackward(Empty) returns (PlayerTime);

  // Playlist Commands
  // Skip to a specific track in the playlist
  // at the momemnt, the one set via "current_track_index"
  rpc PlaySpecific(PlaylistPlaySpecific) returns (Empty);
  // Cycle the playlist loop mode, returns the new mode.
  rpc CycleLoop(Empty) returns (PlaylistLoopMode);
  // Add one or multiple tracks to the playlist
  rpc AddToPlaylist(PlaylistTracksToAdd) returns (Empty);
  // Remove one or multiple tracks from the playlist
  rpc RemoveFromPlaylist(PlaylistTracksToRemove) returns (Empty);
  // Swap some tracks.
  rpc SwapTracks(PlaylistSwapTracks) returns (Empty);
  // Get all tracks of the playlist.
  rpc GetPlaylist(Empty) returns (PlaylistTracks);
  // Shuffle the playlist, returns the new playlist tracks.
  rpc ShufflePlaylist(Empty) returns (Empty);
  // Check for and remove deleted items from the playlist.
  // Unlike shuffle, this will send Removal events
  rpc RemoveDeletedTracks(Empty) returns (Empty);

  // Misc Commands
  rpc ReloadConfig(Empty) returns (Empty);
  rpc SubscribeServerUpdates(Empty) returns (stream StreamUpdates);
}

message Empty {}

// A play status.
message PlayState {
  // The actual status, mapped to [`playback::playlist::Status`]
  uint32 status = 1;
}

message PlayerTime {
  Duration position = 1;
  // TODO: likely also should be possible to be optional
  Duration total_duration = 2;
}

message GetProgressResponse {
  PlayerTime progress = 1;
  uint64 current_track_index = 3;
  uint32 status = 4;
  // actually a u16, but protobuf does not support types lower than 32 bits
  uint32 volume = 5;
  int32 speed = 6;
  bool gapless = 7;
  string radio_title = 9;
}

message VolumeReply {
  // actually a u16, but protobuf does not support types lower than 32 bits
  uint32 volume = 1;
}

message SpeedReply {
  int32 speed = 1;
}

// A Gapless state.
message GaplessState {
  bool gapless = 1;
}

// using a custom Duration that matches rust's definition, as rust's may not fit
// into google's well-known Duration
message Duration {
  uint64 secs = 1;
  uint32 nanos = 2;
}

// all updates that can happen from the server side, without the client to have to ask explicitly
// naming convention for the stream update specific messages is to add the "Update" prefix, even if it already exists
message StreamUpdates {
  oneof type {
    UpdateMissedEvents missed_events = 1;
    UpdateVolumeChanged volume_changed = 2;
    UpdateSpeedChanged speed_changed = 3;
    UpdatePlayStateChanged play_state_changed = 4;
    UpdateTrackChanged track_changed = 5;
    UpdateGaplessChanged gapless_changed = 6;

    UpdatePlaylist playlist_changed = 7;
  }
}

// Indicate that some events could not be send
// Like a "Lagged" Error from tokio-stream
message UpdateMissedEvents {
  uint64 amount = 1;
}

// The Volume changed, send new information
message UpdateVolumeChanged {
  // reuse the existing message
  VolumeReply msg = 1;
}

// The Speed changed, send new information
message UpdateSpeedChanged {
  // reuse the existing message
  SpeedReply msg = 1;
}

// TODO: is play-state (playing / paused / ??) the only things this should do?
message UpdatePlayStateChanged {
  // reuse the existing message
  PlayState msg = 1;
}

// The Gapless state changed, send new information.
message UpdateGaplessChanged {
  // reuse the existing message
  GaplessState msg = 1;
}

// The track changed in some way, send new information
// This includes everything from changing to a new track, new radio title, etc
// This is *not* used for regular track progress updates
// NOTE: this may or may not be sent for the initial track after startup as the client may connect after the track started
message UpdateTrackChanged {
  // The index into the playlist of which track changed.
  uint64 current_track_index = 1;
  // Indicates if this update is a change to a new track (not just metadata change)
  bool current_track_updated = 2;

  // all values below should be moved into their own "Track" message at some point
  // instead of having the TUI fetch everything from the file itself
  // radio title, track title
  // the following is (linux protobuf) 3.15, ubuntu 2204 still has (linux protobuf) 3.12
  // optional string title = 3;
  // the following "oneof" is wire equivalent to the above "optional"
  oneof optional_title {
    string title = 3;
  }
  PlayerTime progress = 4;
}

// Play a specific track in the playlist
message PlaylistPlaySpecific {
  uint64 track_index = 1;

  TrackId id = 2;
}

// All tracks in the current playlist, they *should* be ordered from lowest to highest index.
message PlaylistTracks {
  uint64 current_track_index = 1;
  repeated PlaylistAddTrack tracks = 2;
}

message UpdatePlaylist {
  oneof type {
    PlaylistAddTrack add_track = 1;
    PlaylistRemoveTrack remove_track = 2;
    PlaylistCleared cleared = 3;
    PlaylistLoopMode loop_mode = 4;
    PlaylistSwapTracks swap_tracks = 5;
    PlaylistShuffled shuffled = 6;
  }
}

// A Track got added to the playlist, this message contains where it was added and all the metadata required for display.
message PlaylistAddTrack {
  // The index the track was added to the playlist.
  // If this is not at the end, all tracks at that index and after need to be shifted to make place for this new one.
  uint64 at_index = 1;

  // all values below should be moved into their own "Track" message at some point
  // instead of having the TUI fetch everything from the file itself
  // radio title, track title
  // the following is (linux protobuf) 3.15, ubuntu 2204 still has (linux protobuf) 3.12
  // optional string title = 3;
  // the following "oneof" is wire equivalent to the above "optional"
  oneof optional_title {
    string title = 2;
  }
  // TODO: allow this to be optional for unknown durations
  Duration duration = 3;

  // The Id of the track that was added
  TrackId id = 4;
}

// A Track got removed from the playlist.
message PlaylistRemoveTrack {
  // The index of the track that was removed.
  uint64 at_index = 1;

  // The Id of the track that was removed
  TrackId id = 2;
}

// The Playlist got completely cleared
message PlaylistCleared {
  // empty as there are no values, but not using "Empty" to have a unique message id
}

// The current Loop mode for the playlist
message PlaylistLoopMode {
  // The actual mode, mapped to [`config::v2::server::LoopMode`]
  uint32 mode = 1;
}

// Some track needs to be swapped.
message PlaylistSwapTracks {
  // The first index to swap
  uint64 index_a = 1;
  // The second index to swap
  uint64 index_b = 2;
}

// Add multiple tracks to a Playlist
message PlaylistTracksToAdd {
  // The index the track(s) are added at.
  // If this is not at the end, all tracks at that index and after need to be shifted to make place for this new one.
  uint64 at_index = 1;

  // All the Tracks to add at the index
  repeated TrackId tracks = 2;
}

// Remove multiple track or clear the playlist
message PlaylistTracksToRemove {
  oneof type {
    PlaylistTracksToRemoveIndexed indexed = 1;
    PlaylistTracksToRemoveClear clear = 2;
  }
}

// Remove multiple tracks from a playlist
message PlaylistTracksToRemoveIndexed {
  // The index the track(s) that are removed
  // This is the starting index, and x amount of elements are removed after
  uint64 at_index = 1;

  // All the Tracks to remove at the index
  repeated TrackId tracks = 2;
}

/// Clear the entire playlist
message PlaylistTracksToRemoveClear {
  // empty as there are no values, but not using "Empty" to have a unique message id
}

/// Indicate that the playlist has been shuffled and should be re-fetched
message PlaylistShuffled {
  PlaylistTracks shuffled = 1;
}

// A Identifier for a track.
message TrackId {
  oneof source {
    // Path on the system
    // bytes *could* be used, but it way more complex and platform dependant
    string path = 1;
    // Url (ex. radio)
    string url = 2;
    // A podcast episode
    string podcastUrl = 3;
  }
}
